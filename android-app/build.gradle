plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
    id("org.jetbrains.kotlin.kapt")
    id("com.github.ben-manes.versions")
}

// FIXME: Waiting for https://github.com/realm/realm-java/issues/7062 to be implemented to remove that line
apply plugin: 'realm-android'

android {
    compileSdkVersion Android.compile_sdk
    buildToolsVersion Android.build_tools

    defaultConfig {
        applicationId 'fr.cph.chicago'
        versionCode 207
        versionName '5.14.10'

        minSdkVersion Android.min_sdk
        targetSdkVersion Android.target_sdk

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        def props = properties()
        def googleMapsApiKey = props.get('google.streetmap.key')
        def ctaTrainKey = props.get('cta.train.key')
        def ctaBusKey = props.get('cta.bus.key')
        // Api Keys
        resValue "string", "google_maps_api_key", (googleMapsApiKey != null) ? new String(Base64.getDecoder().decode(googleMapsApiKey)) : ""
        resValue "string", "cta_train_key", (ctaTrainKey != null) ? new String(Base64.getDecoder().decode(ctaTrainKey)) : ""
        resValue "string", "cta_bus_key", (ctaBusKey != null) ? new String(Base64.getDecoder().decode(ctaBusKey)) : ""
    }

    buildFeatures {
        compose true
        viewBinding true
    }

    // Change output apk name
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "${parent.name}-${output.baseName}-${variant.versionName}.apk"
        }
    }

    compileOptions {
        def javaVersion = JavaVersion.VERSION_11
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.1.0-rc02'
    }

    sourceSets {
        main { java.srcDirs = ['src/main/kotlin'] }
        googleplay { java.srcDirs = ['src/googleplay/kotlin'] }
        foss { java.srcDirs = ['src/foss/kotlin'] }
    }

    signingConfigs {
        release {
            def propsFile = this.file('keystore.properties')
            if (propsFile.exists() && gradle.startParameter.taskNames.any {
                it.contains('Release') || it.contains('build')
            }) {
                println("Building release app")
                def props = new Properties()
                props.load(new FileInputStream(propsFile))
                def storeFilePath = props['storeFile']
                if(!storeFilePath?.trim()) {
                    throw new GradleException('storeFile is null or empty')
                }
                storeFile = new File(storeFilePath)
                if(!storeFile.exists()) {
                    throw new GradleException(storeFilePath + ' does not exists')
                }
                storePassword = props['keyStorePassword']
                if (!storePassword?.trim()) {
                    throw new GradleException('keyStorePassword is null or empty')
                }
                keyAlias = props['keyAlias']
                if (!keyAlias?.trim()) {
                    throw new GradleException('keyAlias is null or empty')
                }
                keyPassword = props['aliasPassword']
                if (!keyPassword?.trim()) {
                    throw new GradleException('aliasPassword is null or empty')
                }
            } else {
                println("Building non-release app")
                storeFile file('default')
                storePassword 'default'
                keyAlias 'default'
                keyPassword 'default'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFile 'proguard-android-optimize.txt'
            if (signingConfigs.hasProperty('release')) {
                if (signingConfigs.release.storePassword != 'default') {
                    signingConfig signingConfigs.release
                }
            }
        }
    }

    flavorDimensions "env"

    productFlavors {
        googleplay {
            dimension "env"
            resValue "string", "app_flavor", "gplay"
        }
        foss {
            dimension "env"
            applicationIdSuffix ".foss"
            def mapBoxToken = properties().get('mapbox.token')
            if (mapBoxToken != null) {
                resValue "string", "mapbox_token", new String(Base64.getDecoder().decode(properties().get('mapbox.token')))
            } else {
                resValue "string", "mapbox_token", ""
            }
            resValue "string", "app_flavor", "fdroid"
        }
    }

    lintOptions {
        checkReleaseBuilds true
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
}

dependencies {
    // Kotlin
    implementation(Lib.kotlin)
    implementation(Lib.kotlin_reflect)

    // Jetpack
    // FIXME clean reorganize new dependencies
    def composeVersion = "1.2.0-alpha04"
    implementation("androidx.compose.runtime:runtime:" + composeVersion)
    implementation("androidx.compose.ui:ui:" + composeVersion)
    implementation("androidx.compose.foundation:foundation-layout:" + composeVersion)
    implementation("androidx.compose.material:material:" + composeVersion)
    implementation("androidx.compose.material:material-icons-core:" + composeVersion)
    implementation("androidx.compose.material:material-icons-extended:" + composeVersion)
    implementation("androidx.compose.foundation:foundation:" + composeVersion)
    implementation("androidx.compose.animation:animation:" + composeVersion)
    implementation("androidx.compose.ui:ui-tooling:" + composeVersion)
    implementation("androidx.compose.runtime:runtime-livedata:" + composeVersion)
    implementation("androidx.constraintlayout:constraintlayout-compose:1.0.0")
    implementation 'androidx.work:work-runtime-ktx:2.7.1'
    implementation("androidx.activity:activity-compose:1.4.0")
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:2.4.1")
    implementation("com.google.accompanist:accompanist-appcompat-theme:0.20.3")
    implementation "com.google.accompanist:accompanist-swiperefresh:0.20.3"
    implementation 'androidx.navigation:navigation-runtime-ktx:2.4.1'
    implementation("androidx.navigation:navigation-compose:2.4.1")
    implementation group: 'androidx.compose.material3', name: 'material3', version: '1.0.0-alpha06'

    implementation("androidx.hilt:hilt-work:1.0.0")
    kapt("androidx.hilt:hilt-compiler:1.0.0")

    // Google
    implementation(Lib.material)

    // Jackson4
    implementation(Lib.jackson_core)
    implementation(Lib.jackson_databind)
    implementation(Lib.jackson_annotations)
    implementation(Lib.jackson_module_kotlin)

    // RxJava
    implementation(Lib.rx)
    implementation(Lib.rx_android)
    implementation(Lib.rx_kotlin)

    // Tools
    implementation(Lib.commons_collections4)
    implementation(Lib.sliding_up_panel)
    implementation(Lib.univocity)
    implementation(Lib.easypermissions)
    implementation(Lib.photoview)
    implementation(Lib.re_kotlin)
    implementation(Lib.timber)
    implementation(Lib.retrofit2)
    implementation(Lib.retrofit2_converter)
    implementation(Lib.retrofit2_rxjava3)
    implementation(Lib.okhttp3)
    implementation(Lib.okhttp3_logging)

    // Google play flavor
    googleplayImplementation(Lib.google_services_map)
    googleplayImplementation(Lib.google_services_location)
    googleplayImplementation("com.google.maps.android:maps-compose:1.2.0")

    // Foss flavor
    // Add OSM

    testImplementation(Lib.junit) { exclude group: "org.hamcrest", module: "hamcrest-core" }
    testImplementation(Lib.mockito) { exclude group: "org.hamcrest", module: "hamcrest-core" }
    testImplementation(Lib.hamcrest)
}

dependencyLocking {
    lockAllConfigurations()
}

task currentVersion {
    doLast {
        def android = project.extensions.findByName("android")
        def versionName = android.defaultConfig.versionName
        def versionCode = android.defaultConfig.versionCode
        def fdroidVersionName = versionName + "-fdroid"
        println("Version name: " + versionName)
        println("Version code: " + versionCode)
        println("FDroid tag: " + fdroidVersionName)
        println("Git tag cmd: git tag " + fdroidVersionName + " && git push origin " + fdroidVersionName)
    }
}

def properties() {
    def props = new Properties()
    def appProperties = this.file('app.properties')
    if (appProperties.exists()) {
        props.load(new FileInputStream(appProperties))
        if (props.get('google.streetmap.key') == null) println("google.streetmap.key not found in app.properties")
        if (props.get('cta.train.key') == null) println("cta.train.key not found in app.properties")
        if (props.get('cta.bus.key') == null) println("cta.bus.key not found in app.properties")
        if (props.get('mapbox.token') == null) println("mapbox.token not found in app.properties")
    } else {
        println("No app.properties found")
    }
    return props
}
